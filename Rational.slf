
terminals s succ inv z inc less greater equal

module Nat = org.sasylf.util.Natural

syntax
   n, m, p = Nat.n ::= 0 | s n 
    
    q, r ::= succ n
      |  n + inv succ q
      
    1 := s 0
     
      
       
judgment equal = Nat.equal : n1 = n2 

judgment plus = Nat.plus : n1 + n2 = n3

judgment times = Nat.times : n1 * n2 = n3

judgment gt = Nat.gt : n1 > n2


//theorem plus-total = Nat.plus-total : n1 + n2 = n3
  
judgment equ: q = q

----- eq
q = q

judgment inc: inc q = q


----- inc-whole
inc succ n = succ s n

----- inc-frac
inc n + inv succ q = n + inv succ q


judgment abs: q = n / n

----- abs-whole
q = s n / s 0


q = m / n
m + n = n1
n4 * n1 = n2
n2 + n = n3
------------------------------- abs-frac
n4 + inv succ q = n3 / n1





judgment grt: q > q

q1 = m1 / n1
q2 = m2 / n2
m1 * n2 = p12
m2 * n1 = p21
p12 > p21
--------------- grt
q1 > q2


judgment rep: n / n = q

----- rep-eq
s n / s n = q


s n3 + s n2 = n1
n / s n2 = r
inc r2 = r
----- rep-gt
s n1 / s n2 = r


judgment add: q + q = q

q1 = m1 / n1
q2 = m2 / n2
m1 * n2 = p12
m2 * n1 = p21
n1 * n2 = n12
p12 + p21 = p
p / n12 = q3
-------------- add
q1 + q2 = q3


judgment mul: q * q = q

q1 = m1 / n1
q2 = m2 / n2
m1 * m2 = m12
n1 * n2 = n12
m12 / n12 = q3
------------- mul
q1 * q2 = q3


lemma equ-reflexive:
    forall d: q = q
    exists q = q
    proof by rule eq
end lemma


lemma equ-symmetric:
    forall d: q1 = q2
    exists q2 = q1
    use inversion of eq on d where q1 := q2
    proof by rule eq
end lemma


lemma equ-transitive:
    forall d1:q1 = q2
    forall d2:q2 = q3
    exists q1 = q3
    use inversion of eq on d1 where q1 := q2
    proof by d2
end lemma
     
   
lemma whole-preserves-eq:
    forall d1: n1 = n2
    exists succ n1 = succ n2
    use inversion of Nat.eq on d1 where n1 := n2
    proof by rule eq
end lemma


lemma frac-preserves-eq:
    forall d1: n1 = n2
    forall d2: q1 = q2
    exists n1 + inv succ q1 = n2 + inv succ q2
    use inversion of Nat.eq on d1 where n1 := n2
    use inversion of eq on d2 where q1 := q2
    proof by rule eq
  end lemma


  lemma inc-respects-equ:
    forall d1: inc q1 = q2
      forall d2: q1 = q3
      forall d3: q2 = q4
    exists inc q3 = q4
    use inversion of eq on d2 where q1 := q3
    use inversion of eq on d3 where q2 := q4
    proof by d1
  end lemma


  lemma inc-total:
    forall q1
    exists inc q1 = q2
    proof by case analysis on q1:
      case succ n is
        _: inc (succ n) = (succ (s n)) by rule inc-whole
      end case
      case n + inv succ q is
        _: inc (n + inv succ q) = (n + inv succ q) by rule inc-frac
      end case
    end case analysis
  end lemma


lemma inc-deterministic:
    forall d1: inc q1 = q2
    forall d2: inc q3 = q4
    forall d3: q1 = q3
    exists q2 = q4
    use inversion of eq on d3 where q1 := q3
    proof by case analysis on d1:
      case rule
        ----------- inc-whole
        _:inc succ n = succ s n
        where q3 := succ n and q2 := succ s n
      is
        proof by case analysis on d2:
          case rule
            ------------- inc-whole
            _:inc succ n' = succ s n'
            where n := n' and q4 := succ s n'
          is 
            proof by rule eq
          end case
        end case analysis
      end case
      case rule
        ----------------------------------- inc-frac
        _:inc n + inv succ q = n + inv succ q
        where q3 := n + inv succ q and q2 := n + inv succ q
      is
        proof by case analysis on d2:
          case rule
            ----------------------------------- inc-frac
            _:inc n + inv succ q = n + inv succ q
            where q4 := n + inv succ q
            is proof by rule eq
            end case
          end case analysis
        end case
      end case analysis        
end lemma

lemma abs-respects-eq:
    forall d1: q1 = n1 / n2
    forall d2: q1 = q2
    forall d3: n1 = n3
    forall d4: n2 = n4
    exists q2 = n3 / n4
    use inversion of eq on d2 where q1 := q2
    use inversion of Nat.eq on d3 where n1 := n3
    use inversion of Nat.eq on d4 where n2 := n4
    proof by d1
end lemma

lemma abs-deterministic:
  forall d1: q1 = m1 / n1
  forall d2: q2 = m2 / n2
  forall d3: q1 = q2
  exists m1 = m2 and n1 = n2
  use inversion of eq on d3 where q2 := q1 
  proof by case analysis on d1:
    case rule
      --------- abs-whole
      _:q2' = (s n) / (s 0)
      where m1 := s n and n1 := s 0 and q1 := q2'
    is
      proof by case analysis on d2:
        case rule
          --------- abs-whole
          _:q2' = (s n') / (s 0)
          where m2 := s n' and n2 := s 0
        is 
          d4: n1 = n2 by rule Nat.eq
          d5: m1 = m2 by rule Nat.eq
          proof by d4, d5
        end case
      end case analysis
    end case
    
      
  end case analysis
end lemma
   


lemma abs-total:
  forall q
  exists q = s m / s n
  proof by induction on q:
    case succ n' is
      d1: succ n' = (s m) / (s 0) by rule abs-whole
  end case
    case n' + inv succ q' is
      d2: q' = (s m') / (s n'') by induction hypothesis on q'
      d3:m' + s n'' = n1         by theorem Nat.plus-total on m', (s n'')
      d4: (s m') + s n'' = (s n1) by rule Nat.plus-s on d3
      d5: n' * s n1 = n2         by theorem Nat.times-total on n', (s n1)
      d6: n2 + n'' = n3         by theorem Nat.plus-total on n2, n''
      d7: n2 + (s n'') = (s n3) by lemma Nat.plus-right-succ on d6
      d8: q = s n3 / s n1     by rule abs-frac on d2, d4, d5, d7
    end case
  end induction
end lemma





lemma abs-yields-positive:
  forall d1: q = m / n
  exists m = s m1 and n = s n1
  d2: q = s m1 / s n2 by lemma abs-total on q
  proof by lemma abs-deterministic on d1, d2
end lemma
  



/*
s n3 + s n2 = n1
n / s n1 = r
----- rep-lt
q = s n / s q
*/


