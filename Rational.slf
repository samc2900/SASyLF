
terminals s succ inv z inc less greater equal

module Nat = org.sasylf.util.Natural

syntax
   n, m, p = Nat.n ::= 0 | s n 
    
    q, r ::= succ n
      |  n + inv succ q
      
    1 := s 0
    1 := succ 0
     
      
       
judgment equal = Nat.equal : n1 = n2 

judgment plus = Nat.plus : n1 + n2 = n3

judgment times = Nat.times : n1 * n2 = n3

judgment gt = Nat.gt : n1 > n2

  
judgment equ: q = q

--- eq
q = q

judgment inc: inc q = q


----------- inc-whole
inc succ n = succ s n

-------------------------- inc-frac
inc n + inv succ q = n + inv succ q


judgment abs: q = n / n

--------- abs-whole
succ n = s n / s 0


q = m / n
m + n = n1
n4 * n1 = n2
n2 + n = n3
----------------- abs-frac
n4 + inv succ q = n3 / n1





judgment grt: q > q

q1 = m1 / n1
q2 = m2 / n2
m1 * n2 = p12
m2 * n1 = p21
p12 > p21
--------------- grt
q1 > q2


judgment add: q + q = q



/*
 * add/ : add Q1 Q2 Q3
    <- abs Q1 M1 N1
    <- abs Q2 M2 N2
    <- times M1 N2 P12
    <- times M2 N1 P21
    <- times N1 N2 N12
    <- plus P12 P21 P12+P21
    <- rep P12+P21 N12 Q3.
*/

q1 = m1 / n1    
q2 = m2 / n2
m1 * n2 = p12
m2 * n1 = p21
n1 * n2 = n12
p12 + p21 = p1221
/p1221 / n12 = q3
-------------- add
q1 + q2 = q3


judgment mul: q * q = q

q1 = m1 / n1
q2 = m2 / n2
m1 * m2 = m12
n1 * n2 = n12
m12 / n12 = q3
------------- mul
q1 * q2 = q3


lemma equ-reflexive:
    forall d: q = q
    exists q = q
    proof by rule eq
end lemma


lemma equ-symmetric:
    forall d: q1 = q2
    exists q2 = q1
    use inversion of eq on d where q1 := q2
    proof by rule eq
end lemma


lemma equ-transitive:
    forall d1:q1 = q2
    forall d2:q2 = q3
    exists q1 = q3
    use inversion of eq on d1 where q1 := q2
    proof by d2
end lemma
     
   
lemma whole-preserves-eq:
    forall d1: n1 = n2
    exists succ n1 = succ n2
    use inversion of Nat.eq on d1 where n1 := n2
    proof by rule eq
end lemma


lemma frac-preserves-eq:
    forall d1: n1 = n2
    forall d2: q1 = q2
    exists n1 + inv succ q1 = n2 + inv succ q2
    use inversion of Nat.eq on d1 where n1 := n2
    use inversion of eq on d2 where q1 := q2
    proof by rule eq
  end lemma


  lemma inc-respects-equ:
    forall d1: inc q1 = q2
      forall d2: q1 = q3
      forall d3: q2 = q4
    exists inc q3 = q4
    use inversion of eq on d2 where q1 := q3
    use inversion of eq on d3 where q2 := q4
    proof by d1
  end lemma


  lemma inc-total:
    forall q1
    exists inc q1 = q2
    proof by case analysis on q1:
      case succ n is
        _: inc (succ n) = (succ (s n)) by rule inc-whole
      end case
      case n + inv succ q is
        _: inc (n + inv succ q) = (n + inv succ q) by rule inc-frac
      end case
    end case analysis
  end lemma


lemma inc-unique:
    forall d1: inc q1 = q2
    forall d2: inc q1 = q4
    exists q2 = q4
    proof by case analysis on d1:
      case rule
        ----------- inc-whole
        _:inc succ n = succ s n
        where q1 := succ n and q2 := succ s n
      is
        proof by case analysis on d2:
          case rule
            ------------- inc-whole
            _:inc succ n' = succ s n'
            where n := n' and q4 := succ s n'
          is 
            proof by rule eq
          end case
        end case analysis
      end case
      case rule
        ----------------------------------- inc-frac
        _:inc n + inv succ q = n + inv succ q
        where q1 := n + inv succ q and q2 := n + inv succ q
      is
        proof by case analysis on d2:
          case rule
            ----------------------------------- inc-frac
            _:inc n + inv succ q = n + inv succ q
            where q4 := n + inv succ q
            is proof by rule eq
            end case
          end case analysis
        end case
      end case analysis        
end lemma

lemma abs-respects-eq:
    forall d1: q1 = n1 / n2
    forall d2: q1 = q2
    forall d3: n1 = n3
    forall d4: n2 = n4
    exists q2 = n3 / n4
    use inversion of eq on d2 where q1 := q2
    use inversion of Nat.eq on d3 where n1 := n3
    use inversion of Nat.eq on d4 where n2 := n4
    proof by d1
end lemma


lemma abs-unique:
  forall d1: q1 = m1 / n1
  forall d2: q1 = m2 / n2
  exists m1 = m2 and n1 = n2
  proof by induction on d1:
    case rule
      -------------- abs-whole
      _:succ n = (s n) / (s 0)
      where m1 := s n and n1 := s 0 and q1 := succ n
    is
      proof by case analysis on d2:
        case rule
          -------------- abs-whole
          _:succ n = (s n) / (s 0)
          where m2 := s n and n2 := s 0
        is 
          d4: n1 = n2 by rule Nat.eq
          d5: m1 = m2 by rule Nat.eq
          proof by d5, d4
        end case
      end case analysis
    end case
    case rule
        d1': q = m / n
        d2': m + n = n1'
        d3': n4 * n1' = n2'
        d4': n2' + n = n3
        -------------------- abs-frac
        _: n4 + inv succ q = n3 / n1'
        where q1 := n4 + inv succ q and m1 := n3 and n1 := n1'
    is
      proof by case analysis on d2:
        case rule
            d1'': q = m' / n'
            d2'': m' + n' = n1''
            d3'': n4 * n1'' = n2''
            d4'': n2'' + n' = n3'
            ---------------------- abs-frac
            _: n4 + inv succ q = n3' / n1''
            where m2 := n3' and n2 := n1''
        is
          d6: m = m' and 
          d7: n = n' by induction hypothesis on d1', d1''
          use inversion of Nat.eq on d6 where m := m'
          use inversion of Nat.eq on d7 where n := n'
          d8: n1' = n1'' by theorem Nat.plus-unique on d2', d2''
          use inversion of Nat.eq on d8 where n1' := n1''          
          d9: n2' = n2'' by theorem Nat.times-unique on d3', d3''
          use inversion of Nat.eq on d9 where n2' := n2''          
          d10: n3 = n3' by theorem Nat.plus-unique on d4', d4''
          use inversion of Nat.eq on d10 where n3 := n3'
          proof by d10, d8
    end case
  end case analysis
  end case
  end induction
end lemma




lemma abs-total:
  forall q
  exists q = s m / s n
  proof by induction on q:
    case succ n' is
      d1: succ n' = (s m) / (s 0) by rule abs-whole
  end case
    case n' + inv succ q' is
      d2: q' = (s m') / (s n'') by induction hypothesis on q'
      d3:m' + s n'' = n1         by theorem Nat.plus-total on m', (s n'')
      d4: (s m') + s n'' = (s n1) by rule Nat.plus-s on d3
      d5: n' * s n1 = n2         by theorem Nat.times-total on n', (s n1)
      d6: n2 + n'' = n3         by theorem Nat.plus-total on n2, n''
      d7: n2 + (s n'') = (s n3) by lemma Nat.plus-right-succ on d6
      d8: q = s n3 / s n1     by rule abs-frac on d2, d4, d5, d7
    end case
  end induction
end lemma





lemma abs-yields-positive:
  forall d1: q = m / n
  exists m = s m1 and n = s n1
  d2: q = s m1 / s n2 by lemma abs-total on q
  proof by lemma abs-unique on d1, d2
end lemma
  
  
  
judgment rep: n / n = q

----- rep-eq
s n / s n = 1


n3 + s n2 = s n1
n3 / s n2 = q1 
inc q1 = q 
----- rep-gt
s n1 / s n2 = q
  

n1 + s m = s n  
n1 / s m = q
----- rep-lt
s m / s n = 0 + inv succ q 

/*1 + 2 = 3
2 + 3 = 5
5/3 = 1 2/3
3/2 = 1 / (2/3)*/


lemma rep-implies-positive:
    forall d1: m1 / n1 = q1 
    exists m1 = s m2 and n1 = s n2
    proof by case analysis on d1:
        case rule
            ------------- rep-eq
            _: s m2 / s m2 = 1
            where n1 := s m2 and m1 := s m2 and q1 := 1
        is
            d3: m1 = s m2 by rule Nat.eq
            d4: n1 = s m2 by rule Nat.eq
            proof by d3, d4
    end case
    case rule
            d': n3 + s n2' = s n1'
            d1': n3 / s n2' = q1'
            d2': inc q1' = q1
            -------------- rep-gt
            _: s n1' / s n2' = q1
            where m1 := s n1' and n1 := s n2'
        is
            d5: m1 = s n1' by rule Nat.eq
            d6: n1 = s n2' by rule Nat.eq
            proof by d5, d6
    end case
    case rule
        d3': n1' + s m' = s n
        d4': n1' / s m'= q1'
        -------------------------- rep-lt
         _: s m' / s n = 0 + inv succ q1'
         where m1 := s m' and n1 := s n and q1 := 0 + inv succ q1'
     is
         d7: m1 = s m' by rule Nat.eq
         d8: n1 = s n by rule Nat.eq
         proof by d7, d8
    end case
    end case analysis    
end lemma


lemma rep-inf-contradiction:
    forall d1: m / 0 = q
    exists contradiction
    proof by induction on d1:
    end induction
end lemma


lemma rep-zero-contradiction:
    forall d1: 0 / n = q
    exists contradiction
    proof by induction on d1:
    end induction
end lemma


lemma rep-unique:
  forall d1: m / n = q1
  forall d2: m / n = q2
  exists q1 = q2
  proof by induction on d1:
    case rule
        ----- rep-eq
        d3':s n' / s n' = 1
        where m := s n' and n := s n' and q1 := 1
      is
        proof by case analysis on d2:
          case rule
	          ----- rep-eq
	        _:s n' / s n' = 1
	        where q2 := 1
	        is
	           d6: q1 = q2 by rule eq
	           proof by d6 
	      end case
	      case rule
	        d': n3 + s n' = s n'
            d1': n3 / s n' = q1'
            d2': inc q1' = q2
            -------------- rep-gt
            d3'':  s n' / s n' = q2
          is
            proof by case analysis on d':
                case rule
                  --------- plus-z
                   _: 0 + s n' = s n'
                   where n3 := 0
                 is
                  proof by contradiction on d1'
                end case
                case rule
                  pr1: n4 + s n6 = n6
                  ----------------- plus-s
                  p: s n4 + s n6 = s n6
                 where n3 := s n4 and n' := n6 
                is
                  e4: n3 = 0 by lemma Nat.plus-left-identity on d'
                  proof by contradiction on e4
            end case
          end case analysis
          end case
          case rule
            pr1: n1 + s n' = s n'
            pr2: n1 / s n' = q
            ----- rep-lt
            c: s n' / s n' = 0 + inv succ q
           where q2 := 0 + inv succ q
          is
            proof by case analysis on pr1:
              case rule
                -------------- plus-z
                _: 0 + s n' = s n'
                where n1 := 0
              is
                proof by contradiction on pr2
              end case
              case rule
                pr3: n4 + s n6 = n6
                 ----------------- plus-s
                 _: s n4 + s n6 = s n6
                 where n1 := s n4 and n' := n6
               is
                 p3: s n' + 0 = s n' by lemma Nat.plus-right-zero on (s n')
                 p4: 0 + s n' = s n' by theorem Nat.plus-commutative on p3
                 e4: n1 = 0 by theorem Nat.plus-right-cancels on pr1, p4
                 //use inversion of Nat.eq on e4 where n1 := 0
                 proof by contradiction on e4
               end case
            end case analysis
         end case
	   end case analysis
   end case
   case rule
	    d': n3 + s n2' = s n1'
	    d1': n3 / s n2' = q1'  
	    d2': inc q1' = q1''
	    -------------- rep-gt
	    _: s n1' / s n2' = q1''
	    where m := s n1' and n := s n2' and q1 := q1''
	    is
	       proof by case analysis on d2:
	         case rule
                d'': n3' + s n2' = s n1'
                d1'': n3' / s n2' = q2'
                d2'': inc q2' = q2''
                -------------- rep-gt
                _:  s n1' / s n2' = q2'' 
                where q2 := q2''
              is
                p1: s n2' + n3 = s n1' by theorem Nat.plus-commutative on d'
                p2: s n2' + n3' = s n1' by theorem Nat.plus-commutative on d''
                e1: n3 = n3' by theorem Nat.plus-left-cancels on p1, p2
                use inversion of Nat.eq on e1 where n3 := n3'
                e2: q1' = q2' by induction hypothesis on d1', d1''
                use inversion of eq on e2 where q1' := q2'
                proof by lemma inc-unique on d2', d2''
              end case
              case rule
                 ----- rep-eq
                _:s n1' / s n1' = 1
                where q2 := 1 and n2' := n1'
              is
                e1: n3 = 0 by lemma Nat.plus-left-identity on d'
                use inversion of Nat.eq on e1 where n3 := 0
                proof by contradiction on d1'
              end case
              case rule
                pr1: n1'' + s m'' = s n''
                pr2: n1'' / s m'' = q2'
                -------------------------- rep-lt
                _: s m'' / s n'' = 0 + inv succ q2'
                where q2 := 0 + inv succ q2' and n2' := n'' and n1' := m''
              is
                p1: n1'' + n3 = n4 and
                p2: n4 + s n'' = s n'' by theorem Nat.plus-associative-converse on d', pr1
                e1: n4 = 0 by lemma Nat.plus-left-identity on p2
                use inversion of Nat.eq on e1 where n4 := 0
                use inversion of Nat.plus-z on p1 where n3 := 0 and n1'' := 0
                proof by contradiction on pr2
              end case
             end case analysis
    end case
    case rule
        d3': n1' + s m' = s n'
        d4': n1' / s m' = q1'
        -------------------------- rep-lt
         d1'': s m' / s n' = 0 + inv succ q1'
         where m := s m' and n := s n' and q1 := 0 + inv succ q1'
       is
         proof by case analysis on d2:
           case rule
                    d3'': n1'' + s m' = s n'
                    d4'': n1'' / s m' = q1''
                    -------------------------- rep-lt
                    d2'': s m' / s n' = 0 + inv succ q1''
                    where q2 := 0 + inv succ q1''
                  is
                    p1: s m' + n1' = s n' by theorem Nat.plus-commutative on d3'
                    p2: s m' + n1'' = s n' by theorem Nat.plus-commutative on d3''
                    e1: n1' = n1'' by theorem Nat.plus-left-cancels on p1, p2
                use inversion of Nat.eq on e1 where n1' := n1''
                e2: q1' = q1'' by induction hypothesis on d4', d4''
                use inversion of eq on e2 where q1' := q1''
                e3: q1 = q2 by rule eq
                proof by e3
            end case
            case rule
                ------------ rep-eq
                _: s n' / s n' = 1
                where m' := n' and q2 := 1
              is
                e1: n1' = 0 by lemma Nat.plus-left-identity on d3'
                use inversion of Nat.eq on e1 where n1' := 0
                proof by contradiction on d4'
              end case
              case rule
                pr1: n3' + s n' = s m'
                pr2: n3' / s n' = q2'
                pr3: inc q2' = q2
                -------------- rep-gt
                _:  s m' / s n' = q2
              is
                p1: n3' + n1' = n4 and
                p2: n4 + s m' = s m' by theorem Nat.plus-associative-converse on d3', pr1
                e1: n4 = 0 by lemma Nat.plus-left-identity on p2
                use inversion of Nat.eq on e1 where n4 := 0
                use inversion of Nat.plus-z on p1 where n3' := 0 and n1' := 0
                proof by contradiction on pr2
              end case
 end case analysis
 end case
 end induction
end lemma


theorem rep-times-right:
  forall d1: m1 / n1 = q1
  forall d2: m1 * s n2 = m12
  forall d3: n1 * s n2 = n12
  exists m12 / n12 = q1
  proof by induction on d1:
    case rule
      ----------- rep-eq
      _: (s m1') / (s m1') = 1
      where m1 := s m1' and n1 := s m1' and q1 := 1
    is
      e1: m12 = s n3 by theorem Nat.times-preserves-positive on d2
      use inversion on e1 where m12 := s n3
      e2: m12 = n12 by theorem Nat.times-unique on d2, d3
      use inversion on e2 where n12 := s n3
      proof by rule rep-eq
    end case
    case rule
      pr1: n0 + (s n1') = (s m1')
      pr2: n0 / (s n1') = q0
      pr3: inc q0 = q1
      ----------- rep-gt
      _: (s m1') / (s n1') = q1
      where m1 := s m1' and n1 := s n1' 
    is
      e1: m12 = s n3 by theorem Nat.times-preserves-positive on d2
      e2: n12 = s n4 by theorem Nat.times-preserves-positive on d3
      use inversion on e1 where m12 := s n3
      use inversion on e2 where n12 := s n4
      t1: n0 * s n2 = n5 by theorem Nat.times-total on n0, (s n2)
      t2: n0 * s n2 = n6 and
      t3: s n1' * s n2 = n7 and
      p1: n6 + n7 = s n3 by theorem Nat.times-right-distributes-over-plus on pr1, d2
      d4: n5 / n7 = q0 by induction hypothesis on pr2, t1, t3
      e3: n5 = n6 by theorem Nat.times-unique on t1, t2
      e4: n12 = n7 by theorem Nat.times-unique on d3, t3
      use inversion on e3 where n5 := n6
      use inversion on e4 where n7 := n12
      proof by rule rep-gt on p1, d4, pr3
    end case
    case rule
      pr1: n0 + (s m1') = (s n1')
      pr2: n0 / (s m1') = q0
      ----------- rep-lt
      _: (s m1') / (s n1') = (0 + inv succ q0)
      where n1 := s n1' and m1 := s m1' and q1 := 0 + inv succ q0
    is
      e1: m12 = s n3 by theorem Nat.times-preserves-positive on d2
      e2: n12 = s n4 by theorem Nat.times-preserves-positive on d3
      use inversion on e1 where m12 := s n3
      use inversion on e2 where n12 := s n4
      t1: n0 * s n2 = n5 by theorem Nat.times-total on n0, (s n2)
      t2: n0 * s n2 = n6 and
      t3: s m1' * s n2 = n7 and
      p1: n6 + n7 = s n4 by theorem Nat.times-right-distributes-over-plus on pr1, d3
      d4: n5 / n7 = q0 by induction hypothesis on pr2, t1, t3
      e3: n5 = n6 by theorem Nat.times-unique on t1, t2
      e4: m12 = n7 by theorem Nat.times-unique on d2, t3
      use inversion on e3 where n5 := n6
      use inversion on e4 where n7 := m12
      proof by rule rep-lt on p1, d4
    end case
  end induction
end theorem


theorem rep-times-left:
  forall d1: m1 / n1 = q1
  forall d2: s m2 * m1 = m21
  forall d3: s m2 * n1 = n21
  exists m21 / n21 = q1
  d2': m1 * s m2 = m21 by theorem Nat.times-commutative on d2
  d3': n1 * s m2 = n21 by theorem Nat.times-commutative on d3
  proof by theorem rep-times-right on d1, d2', d3'
end theorem

theorem rep-right-cancels:
  forall d1: m1 / n1 = q1
  forall d2: m2 * n2 = m1
  forall d3: n3 * n2 = n1 
  exists m2 / n3 = q1
  do case analysis on n2:
    case 0 is
      t1: m2 * 0 = 0 by lemma Nat.times-right-zero on m2
      e1: m1 = 0 by theorem Nat.times-unique on d2, t1
      use inversion on e1 where m1 := 0
      proof by unproved
      end case 
  end case analysis
  proof by induction on d1:
    case rule
      ----------- rep-eq
      _: (s m1') / (s m1') = 1
      where m1 := s m1' and n1 := s m1' and q1 := 1
    is
      e1: m2 = n3 by theorem Nat.times-right-cancels on d2, d3
      proof by unproved
    end case

    case rule
      _: p0 + (s p1) = (s p2)
      _: p0 / (s p1) = r0
      _: inc r0 = q1
      ----------- rep-gt
      _: (s p2) / (s p1) = q1
    is
      proof by unproved
    end case

    case rule
      _: p0 + (s p1) = (s p2)
      _: p0 / (s p1) = r0
      ----------- rep-lt
      _: (s p1) / (s p2) = (0 + inv succ r0)
    is
      proof by unproved
    end case

  end induction
end theorem

theorem rep-total:
  forall m
  forall n
  forall cmp: s n > s m or s m = s n or s m > s n
  exists s m / s n = q .
  proof by induction on cmp:
    case or gt1: (s n) > (s m) is
      p1: s n' + s m = s n by theorem Nat.gt-implies-plus on gt1
      p2: s m + s n' = s n by theorem Nat.plus-commutative on p1
      gt2: s n > s n' by theorem  Nat.plus-succ-left-implies-lt on p2
      gt3: n > n' by lemma Nat.succ-preserves-gt-converse on gt2
      cmp2: s m > s n' or s n' = s m or s n' > s m by theorem Nat.cmp-total on (s n'), (s m)
      rep1: s n' /  s m = q1 by induction hypothesis on n', m, cmp2 
      proof by unproved
    end case

    case or e1: (s m) = (s n) is
      use inversion on e1 where m := n
      proof by rule rep-eq
    end case

    case or _: (s m) > (s n) is
      proof by unproved
    end case


end induction
end theorem
